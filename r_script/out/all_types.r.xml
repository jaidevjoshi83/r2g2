<tool id="all_types" name="all_types" version="0.1.0" profile="22.01" >
    <description>test</description>
    <requirements>
    
    </requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <version_command>all_types.r --version</version_command>
    <command><![CDATA[
        #if $sub_process.process == "train"
            h "${sub_process.missing_param_for_h}"
            epochs "${sub_process.epochs}"
            lr "${sub_process.lr}"
        #elif $sub_process.process == "predict"
            h "${sub_process.missing_param_for_h}"
            input_file "${sub_process.input_file}"
            output_file "${sub_process.missing_param_for_output_file}"
        #end if

        #if $group0.process == "enable_feature"
            enable_feature "${group0.enable_feature}"
        #elif $group0.process == "disable_feature"
            disable_feature "${group0.disable_feature}"
        #end if
        #if $group1.process == "enable_feature_1"
            enable_feature_1 "${group1.enable_feature_1}"
        #elif $group1.process == "disable_feature_2"
            disable_feature_2 "${group1.disable_feature_2}"
        #end if
    ]]></command>
    <inputs>
        <conditional name="sub_process">
  <param name="process" type="select" label="Select Process">
    <option value="train">Train</option>
    <option value="predict">Predict</option>
  </param>
  <when value="train">
    <!-- No param XML found for h -->
    <param name="epochs" type="text" label="Epochs" value="10" optional="True" argument="--epochs" help="Number of epochs"/>
    <param name="lr" type="text" label="Lr" value="0.001" optional="True" argument="--lr" help="Learning rate"/>
  </when>
  <when value="predict">
    <!-- No param XML found for h -->
    <param name="input_file" type="text" label="Input File" value="" optional="True" argument="--input_file" help="Path to input file"/>
    <!-- No param XML found for output_file -->
  </when>
</conditional>
        <conditional name="group0">
  <param name="process" type="select" label="Select Option for group0">
    <option value="enable_feature">enable_feature</option>
    <option value="disable_feature">disable_feature</option>
  </param>
  <when value="enable_feature">
    <param name="enable_feature" type="boolean" label="Enable Feature" truevalue="--enable_feature" falsevalue="" checked="False" optional="True" argument="--enable_feature" help="Enable a specific feature"/>
  </when>
  <when value="disable_feature">
    <param name="disable_feature" type="boolean" label="Disable Feature" truevalue="--disable_feature" falsevalue="" checked="False" optional="True" argument="--disable_feature" help="Disable a specific feature"/>
  </when>
</conditional>
<conditional name="group1">
  <param name="process" type="select" label="Select Option for group1">
    <option value="enable_feature_1">enable_feature_1</option>
    <option value="disable_feature_2">disable_feature_2</option>
  </param>
  <when value="enable_feature_1">
    <param name="enable_feature_1" type="boolean" label="Enable Feature 1" truevalue="--enable_feature_1" falsevalue="" checked="False" optional="True" argument="--enable_feature_1" help="Enable a specific feature"/>
  </when>
  <when value="disable_feature_2">
    <param name="disable_feature_2" type="boolean" label="Disable Feature 2" truevalue="--disable_feature_2" falsevalue="" checked="False" optional="True" argument="--disable_feature_2" help="Disable a specific feature"/>
  </when>
</conditional>
<param name="verbose" type="boolean" label="Verbose" truevalue="--verbose" falsevalue="" checked="False" optional="True" argument="--verbose" help="Enable verbose output"/>
<param name="format" type="text" label="Format" value="csv" optional="True" argument="--format" help="Format of input file (default: csv)"/>
<param name="threads" type="text" label="Threads" value="4" optional="True" argument="--threads" help="Number of threads to use (default: 4)"/>
<param name="normalize" type="boolean" label="Normalize" truevalue="--normalize" falsevalue="" checked="False" optional="True" argument="--normalize" help="Enable data normalization"/>
<param name="threshold" type="text" label="Threshold" value="0.5" optional="True" argument="--threshold" help="Threshold value for filtering (default: 0.5)"/>
<param name="categories" type="text" label="Categories" value="" optional="True" argument="--categories" help="A list of category names (e.g., A B C)"/>
<param name="log_level" type="text" label="Log Level" value="INFO" optional="True" argument="--log_level" help="Set logging level (default: INFO)"/>
    </inputs>
    <outputs>
        
        
        <data name="GALAXY_ANVIO_LOG" format="txt" label="${tool.name} on ${on_string}: Log"/>
    </outputs>
    <help><![CDATA[


  usage: all_types.r [-h] [--verbose] [--epochs EPOCHS] [--lr LR] [--input-file INPUT_FILE] [--output-file OUTPUT_FILE] [--input_file INPUT_FILE] [--format {csv,tsv,json}] [--threads THREADS] [--normalize] [--threshold THRESHOLD]
                             [--categories CATEGORIES [CATEGORIES ...]] [--enable_feature] [--disable_feature] [--enable_feature_1] [--disable_feature_2] [--output_file OUTPUT_FILE] [--log_level {DEBUG,INFO,WARNING,ERROR}]
  
  test
  
  options:
    -h, --help            show this help message and exit
    --verbose             Enable verbose output
    --epochs EPOCHS       Number of epochs
    --lr LR               Learning rate
    --input-file INPUT_FILE
                          Input CSV file
    --output-file OUTPUT_FILE
                          Output CSV file
    --input_file INPUT_FILE
                          Path to input file
    --format {csv,tsv,json}
                          Format of input file (default: csv)
    --threads THREADS     Number of threads to use (default: 4)
    --normalize           Enable data normalization
    --threshold THRESHOLD
                          Threshold value for filtering (default: 0.5)
    --categories CATEGORIES [CATEGORIES ...]
                          A list of category names (e.g., A B C)
    --enable_feature      Enable a specific feature
    --disable_feature     Disable a specific feature
    --enable_feature_1    Enable a specific feature
    --disable_feature_2   Disable a specific feature
    --output_file OUTPUT_FILE
                          Path to output file
    --log_level {DEBUG,INFO,WARNING,ERROR}
                          Set logging level (default: INFO)
  


    ]]></help>
</tool>